
PERQdisk User's Guide
=====================

A quick & dirty guide to the PERQ disk munger



1.0  Introduction
-----------------

PERQdisk is a tool for opening and reading PERQ media archives.  It uses the
same PERQmedia library as PERQemu, the emulator.  This means all supported disk
formats can be read, containing either POS filesystems or RT-11 floppy volumes.
Currently there is no information available about the low-level implementation
of PNX filesystems, but these may be supported in a future release.

PERQdisk is a console application written in C# targeting .NET Framework 4.8.
It will run on any system that can run PERQemu; please see the PERQemu User's
Guide for details.


1.1  Getting Started
--------------------

There are no special installation steps required.  Download the release from
GitHub and unpack the PERQemu.zip archive in any convenient location.  To run
the program:

    Windows:    Double-click the PERQdisk.exe icon

    Mac OS X,
    Linux:      Open a Terminal window and change to the PERQdisk directory;
                Type "mono PERQdisk.exe".

On all platforms, a banner is printed and the command line interface (CLI) ">"
prompt is issued.  From here all interactions with PERQdisk are through the CLI.
Like PERQemu, the TAB key provides completion and prompts for arguments as each
line is typed, with full editing and recall features.

You may also provide the name of a media file to open on the command line when
launching the program:

% mono PERQdisk.exe -h
Usage:  PERQdisk [-h] [-v] [-s <file>] [<disk>]

    -h      print this help message
    -v      print version information
    -s file read startup commands from file
    disk    Disk image to load


1.2  Loading and Unloading
--------------------------

PERQdisk allows you to interrogate one media image at a time.  It automatically
determines what type of volume or filesystem is contained in the file, changing
the command set and prompt depending on the type.  This means:

    POS filesystem (hard disk or floppy):
        Commands to navigate the filesystem are based on POS and use the
        POS pathname syntax.  Files may be typed to the screen or copied
        from the virtual image to the host.  The disk label may be updated
        and the file transcribed into a different format (PHD or PRQM) but
        no changes to the filesystem are possible; use PERQemu for that.

    RT-11 volume (floppy only):
        Commands to manipulate an RT-11 "data" floppy are based on the POS
        FLOPPY command; PERQdisk can (in simple cases) even accept command
        files in POS format to read and write files to and from the floppy.
        New floppies may be created and formatted, files may be viewed,
        deleted, renamed, or copied to the host.  The disk label may be
        edited and floppies may be saved in any supported format (IMD, "raw"
        or PFD, PRQM).

When no image is loaded, the basic prompt is a plain ">" and a limited subset
of commands is available.  The "list" (or "ls") command looks in the current
working directory for any eligible media files to load (based on the list of
known file extensions that PERQmedia can read).  Without arguments, "list"
looks in the current directory, but if given you can specify another location:

> list
> list ../PERQemu/Disks

You can use the "cd" and "pwd" commands to move around the local filesystem or
print out where you are.

To load a file, simply type "load" and the pathname of a file to load.  PERQdisk
probes the file for a valid filesystem or volume signature, and if found builds
an in-memory copy of the disk image so that you can explore it, changing the
prompt accordingly:

    POS:    The program's prompt reflects your current directory in the
            POS filesystem, starting at the "root" of the device (typically
            "sys:" for a hard disk).  Use the POS "path" command to change
            the current directory.

    RT-11:  The prompt changes to "FLOPPY>" and the command set is updated
            to mimic the POS FLOPPY program's syntax.  RT-11 floppy volumes
            are "flat" (no subdirectories) and use a rigid "6.3" filename
            format, much like old versions of DOS.

When the disk image is changed in any way (for POS, the media file's header is
changed, or any updates to the contents for RT-11 floppies) the prompt includes
a "*" to reflect this.

    ** IMPORTANT **

    As with PERQemu you must manually issue the "save", "save as" or "save
    with" command to save your changes permanently; otherwise they are lost
    when PERQdisk exits.  Like PERQemu, "save" updates the file in-place,
    using the same name and format as the original; "save as" lets you give
    the image a new name, while "save with" lets you specify a new name and
    archive format.  The PERQemu User's Guide explains the PERQmedia formats
    in more detail.

To unload a disk and return to the top-level prompt, the "unload" (or "done")
command unmounts the current volume and any un-saved changes are lost.  At any
prompt the "quit" command exits the program immediately.


1.3  Basic Commands
-------------------

A brief summary of the top-level commands is given below.  As PERQdisk is still
in active development, this may change frequently.  You can type "commands" at
any prompt to get a summary of the commands available, or just press TAB to see
what input the program expects next.

    about       Print the program's banner.

    cd          Change the current directory.  This uses the syntax
                appropriate for your host (Windows or Unix) and sets
                the default directory for loading or saving files.

    create      At the top level, new blank RT11 floppies may be created;
                these can then be loaded and used without having to run
                PERQemu.  (You have to use PERQemu to create a new POS
                hard disk or filesystem floppy.)

    help        Brief on-line help.  (Incomplete.)

    list, ls    Show the available media archives available in the
                current directory.

    pwd         Show the current directory (on the host).

    load        Load a media file.

    show        Show the details of a media archive.  Depending on the
                file type, may include text and (eventually) image labels.
                
    quit        Exit PERQdisk.  Y'know, to go run PERQemu!


TODO:   define wildcards and how they're resolved for both local filenames
        and within POS or RT11 volumes!


1.4  POS Commands
-----------------

The original PERQdisk allowed a simple way to navigate and view or extract files
from a POS hard disk image.  This version provides all the same functions but
with a few more bells and whistles:

POS volume mounted.
Sys:>   
Possible completions are:
    cat            cd             check...       commands       compare        
    copy           details        directory      done           dump           
    info           list           ls             more           path           
    pause          pwd            quit           save...        set...         
    show...        tree           type           unload         

The basic host navigation commands (cd, ls/list, pwd) are as described above.
With the caveat that many of these are incomplete or may be debugging commands
to be removed in the release version, the basic functions are as follows:

    cat         Dump a file to the screen without pauses (see "type" below).

    compare     Check that a POS file and a file on the host are identical.
                (Not yet implemented)

    copy        Copy file(s) to the host.  Currently does not do any option
                or switch processing; see section 1.4.1 below for details.

    details     Dump a summary of the mounted filesystem and partitions,
                similar to the POS DETAILS command.

    directory   Show the contents of a directory.  With no arguments, dumps
                the current directory, but accepts wildcards or full POS
                path specifications.

    done,       Dismounts the current filesystem and returns to the top-level
    unload      PERQdisk prompt.

    info        (Debugging)  Shows internal filesystem information about a
                given argument.

    more, type  Dump a (text) file to the screen, pausing at the end of
                each page, or when ^L is encountered (like POS TYPEFILE).

    path        With no argument, shows the current directory in the POS
                filesystem; with an argument, changes to that directory.
                (The current POS path is also shown in the prompt.)  Like
                modern OSes, POS uses "." to mean the current directory,
                and ".." to go up a level in the hierarchy.

    pause       Used in command files, this command prints a message on the
                screen and waits for the user to press RETURN.

    tree        Display a "graphical" representation of the filesystem,
                like the POS DIRTREE command.  Accepts an optional argument
                to start the display at a given partition or directory.

The "set", "save" and "show" prefixes are common to RT-11 disks as well; they
are discussed below.

TODO:       POS pathname syntax might need a bit of clarification, or at
            least a referral to the PERQemu user's guide


1.4.1  POS COPY Command
-----------------------

Besides using "type" to view files on the screen, the copy command is the most
useful command when interrogating POS filesystems.  The general form is:

Sys:> copy source [destination]

If "source" is a device ("sys:"), a partition ("sys:boot" or ":boot") or a
directory name, a recursive copy from that starting point is performed.  In
this case, the optional destination directory must resolve to a directory on
the host.  If _not_ given, the default output directory is used.

If "source" is a wildcard, then all of the files that match are copied and
the optional destination must again be a directory.

If "source" is a single file, the destination may be a directory OR a file name:

    Sys:boot> copy disk.params disktab
        => copies "Sys:boot>Disk.params" to "disktab" on the host)

    Sys:boot> copy disk.params outdir
        => copies "Sys:boot>Disk.params" to "outdir\Disk.params" (Windows)
                                         or "outdir/disk.params" (Unix)

PERQdisk tries to provide some reasonable defaults about where files end up in
the host filesystem.  The general rule is:

    If "destination" is given, use it as specified as the root directory
    for the copied files;

    If "destination" is not provided, use the "default output directory"
    instead (defined as the subdirectory "Output" in the folder where you
    unpack/launch PERQdisk from).

For casual use, plucking a few files out of an image ("copy *.pas .") should be
simple and flexible and put things where you want.  For industrial strength, pro-
level filesystem munging, PERQdisk extends the notion of the "default output
directory" to a path that includes the disk name and full POS path.  For example
(assuming the loaded file is "f0.phd" this "high speed, low drag" configuration
means:

    Sys:> copy .

would create

    Output/f0/sys/boot/...
    Output/f0/sys/user/...
    (etc.)

And loading another disk (from, say, the archive "g7.prqm") would produce:

    Output/g7/sys/boot/...
    Output/g7/sys/accent/...
    (and so on)

With a library of hundreds of disk images to catalog, the aim is to facilitate
the transfer of thousands of files without fuss.  The implementation may change
if it's confusing or unwieldy in practice!
    

Unlike the FLOPPY program, there aren't any global "ASK", "VERIFY" or "CONFIRM"
flags that can be set by separate commands; in POS, COPY has switches that let
you specify whether or not to just clobber existing files or not.  Currently
PERQdisk will NOT clobber directories (meaning it will just merge files into an
existing directory, only creating new ones as needed) and it WILL clobber files
that have the same name.  It _should_ respect read-only permissions, however,
so if you protect extracted files PERQdisk shouldn't come along and stomp on
them -- but this hasn't been tested.  In general, assume that your default umask
(or Windows equivalent) is used when creating files and if PERQdisk can't write
a file it says so and skips it.

In the Perl version a large number of switches are available to modify COPY's
behavior; this switch parsing has not yet been ported to PERQdisk.  Thus, the
following defaults are used:

    On Unix, case folding is ON; POS filenames are shifted to lower case
    when transferred to the host.  On Windows, the original file names are
    used (as Windows is case-insensitive, like POS).

    Recursion is ON; if a device, partition or directory name is specified,
    all the subdirectories are copied as well.  If a single file name is
    given, or a wildcard pattern resolves to files only, no recursion is
    performed.

    Preserving file times is ON (subject to actually being implemented).
    The idea is to try to set the timestamps on the copied file to match
    the originals from the media, within the limitations of the C# runtime
    and/or host OS.  A fussy, minor detail. :-)

A global "dry run" flag used in debugging is available if you build from source.
This lets you see what PERQdisk intends to do without spewing a ton of stuff
all over your local filesystem.


1.5  RT-11 Floppy Commands
--------------------------

PERQdisk implements much of the command set of the POS FLOPPY program.  This was
implemented in "perqfloppy.pl" (unreleased but available upon request) as a way
to use POS-compatible command files to quickly extract sets of files from RT-11
format data floppies.  There appear to be a bewildering number of options, but
most of them are simple switches and quite a few can be ignored (they're only
for compatibility with FLOPPY command files and are no-ops in PERQdisk):

RT11 volume mounted.
FLOPPY>  
Possible completions are:
    ascii          ask            auto           binary         cat            
    cd             check...       commands       compare        compress       
    confirm        delete         density        directory      dismount       
    done           dump...        duplicate      fast           floppyget      
    floppyput      format         fsfloppy       get            list           
    ls             mode           more           mount          noask          
    noconfirm      noverify       pause          put            pwd            
    quit           rename         safe           save...        set...         
    show...        sides          text           type           unload         
    update         verify         zero           

The basic navigation (cd, list/ls, pwd) and other common commands (unload/done,
quit) are as described above in section 1.3.  The media manipulation commands
(save, set, show) in common with the POS menu are described below.  For working
with RT-11 floppies the essential commands are:

    cat, more,      Dump the contents of a floppy file to the screen.
    type            As with their POS equivalents,  "cat" doesn't pause,
                    while "more" or "type" does one screenful at a time.

    compare         Check that a file on the floppy matches one on the
                    host.  (Not yet implemented)

    compress        Coalesce the free space on the floppy.  Essentially
                    "defragments" the floppy, but way, WAY faster than
                    on the actual 8" drive.  (Not yet implemented)

    delete          Delete files from the floppy.

    get             Copy files from the floppy to the host.  See below.

    pause           As with POS, prints a message and waits for RETURN.

    put             Copy files from the host to the floppy.  See below.

    rename          Rename a file on the floppy.

    format, zero    Effectively erase the floppy by creating a new,
                    empty volume and directory structure on the disk.


These commands mainly set flags or conditions that affect how some data transfer
or other operations behave:

    ascii, auto,    Set the transfer mode to one of these values.
    binary, text

    mode            Show the current transfer mode.  See section 1.5.2.

    ask, noask      Set or unset the ASK flag, which tells PERQdisk to
                    prompt for confirmation (or not) before performing
                    certain actions.

    confirm,        Set or unset the CONFIRM flag, which tells PERQdisk
    noconfirm       to prompt for certain "dangerous" actions; in POS
                    these would be commands that overwrite files or in
                    some way delete or modify data.

    fast, safe      Fast is a shortcut for noask, noconfirm, noverify;
                    safe does the opposite.  See section 1.5.3 below.


All of the following are compatibility commands; they are accepted as no-ops
in PERQdisk:

    sides, density, verify, noverify, mount, dismount, fsfloppy,
    floppyget, floppyput, duplicate


1.5.1  Floppy Transfers
-----------------------

The floppy GET and PUT commands are enhanced versions of the POS FLOPPY program
in that they allow the use of wildcards.  Similar rules to the POS filesystem
COPY command apply; the same "<cmd> source [destination]" syntax is used, but
the meanings are reversed depending on the direction of the transfer.  Note that
due to the severe restrictions on file naming imposed by RT-11 and its use of
the limited "Radix 50" character set, PERQdisk tries to provide the same sort of
"intuitive" parsing as the POS FLOPPY program.  In general this means that file
names are automatically generated when copying from the host (PUT), while long
source filenames can be used when copying to the host (GET) as long as the name
resolves unambiguously to a single floppy file.  For example:

    put longfilename.text
        => copied to the floppy as LONGFI.TEX

    get longfilename.text
        => gets LONGFI.TEX from the floppy as longfilename.text

    get longfi.tex longfile.someothername
        => explicitly names the destination file

    get longfi.tex outdir
        => gets LONGFI.TEX to outdir/LONGFI.TEX

As with POS COPY, the output file name is not case-converted by default on Windows
systems, but is converted to lower case on Unix (as is the more common convention).
[A switch or preference setting to change this is desirable/planned.]

Wildcards may also be used with GET and PUT, unlike the POS FLOPPY implementation.
Because RT-11 floppies have only one flat directory, all directory paths are
stripped, so "put ../something/file.txt" would produce "file.txt" on the floppy.

When copying multiple files from the floppy with GET, any destination argument
must resolve to a directory on the host, and the original 6.3-format floppy file
names are used for the output files.  The "@file.cmd" syntax can be very useful
here, as almost every POS floppy was written with a command file to map the long
to short names and back again; commonly a "put.cmd" and "get.cmd" are included
on the floppy for this purpose.


TODO:   the "directory" command is used in POS to produce listings to a text
        file that facilitates the creation of these command files; it would
        be nice to add that to PERQdisk!

TODO:   test and document the behavior of "@" syntax; POS requires that any
        command file run lives on the hard disk (so "get get.cmd; @get") but
        does PERQdisk have this restriction?  Can we "@get" directly from
        the floppy!?  (What if the file exists in both places, hmm?)

TODO:   maybe document the naming restrictions of the RAD50 character set


1.5.2  Line Endings
-------------------

On Unix hosts, PERQdisk attempts to automatically identify text files and convert
line endings for text files.  This works in both directions:  reading a Unix text
file with plain LF line endings produces a POS CRLF-delimited text file on the
floppy; when reading a POS text file and writing to a Unix host, CRLFs are
written out as plain LFs.  The "transfer mode" commands influence this behavior:

    Text mode   Applies the line-ending transformation for text files
                by default; if a binary file is encountered the user
                is prompted (if ASK is on) or the file is skipped.  The
                ASCII command is an alias for TEXT mode.

    Binary mode Skips the line-ending transformation, but if PERQdisk
                detects a text file and ASK is set, prompts to ask if
                the conversion should be done.  Otherwise it just copies
                the file in binary mode.  NOTE:  Accent uses Unix-style
                LF-only line endings!  If you are transferring files to
                use with Accent, you might want to explicitly do so in
                binary mode to avoid conversion.

    Auto mode   The default mode is AUTO, which does its best to detect
                the file type and do/not do the conversion accordingly.

For compatibility with existing command files, each mode may be directly set by
just typing it _as_ a command, or as the parameter to the "mode" command.  With
no argument "mode" prints the mode currently in effect.


1.5.3  Safe vs. Fast
--------------------

Mostly for compatibility, but useful when doing bulk transfers, PERQdisk offers
most of the POS FLOPPY flags and commands to set them.  These are:

    Ask:        The ASK flag lets you specify whether to do an operation
                or not, which is mainly useful if you are using wildcards
                to specify several files but want to selectively skip
                some of them.  The "ask" command turns this flag on, the
                "noask" command turns it off.

    Confirm:    Independently, the CONFIRM flag is used to require user
                intervention if a potentially dangerous command is used
                ("zero" or "format") or if a file could be overwritten.
                This way you can turn off ASK mode and copy lots of files
                quickly, but require a yes/no response if an existing
                file would be clobbered.  "confirm" turns this on, while
                "noconfirm" turns it off again.

    Verify:     In POS FLOPPY, files are generally double-checked for
                errors to make sure no data corruption occurred during
                transfer.  Since PERQdisk isn't dealing with 40-year-old
                8" floppy drives with dirty heads, flaky media and aging
                TTL chips doing data separation of signals over long 50-
                pin ribbon cables we don't actually implement this and
                just assume that all the bits are pristine.  :-)  Both
                the "verify" and "noverify" commands are no-ops.

The shortcuts "safe" and "fast" turn the flags on or off as you'd expect.  The
default when PERQdisk starts up is "safe."


1.6  Common Media Commands
--------------------------

TODO:   Document the save, set, show commands for dealing with media files
        and some of the nicer PRQM format features.



Last modified:  skeezicsb   Sat Nov 19 14:40:17 PST 2022
